- name: Print "Hello, world!" (tutorial)
  statement: After selecting interesting problem you should provide path to the input file and the command you wish to use to compile your solution
    (See the [S]etup tab). When you think you solution is ready to run press Enter. If you wish to stop running press Backspace. Press h to get help.
  test_cases:
    - input: "1234567890"
      output: "Hello, world!"
      complexity: 0
      id: 1
      is_stress_test: false
    - input: ""
      output: "Hello, world!"
      id: 0
      complexity: 0
      is_stress_test: false
  difficulty: Easy

- name: Time in human-readable format
  statement: Write a program which will take a number of seconds as an argument and will print out the same duration in HH:MM:SS format.
  test_cases:
    - input: "90"
      output: "00:01:30"
      complexity: 90
      id: 3
      is_stress_test: false
    - input: "9"
      output: "00:00:09"
      complexity: 9
      id: 0
      is_stress_test: false
    - input: "59"
      output: "00:00:59"
      complexity: 59
      id: 1
      is_stress_test: false
    - input: "60"
      output: "00:01:00"
      complexity: 60
      id: 2
      is_stress_test: false
    - input: "3600"
      output: "01:00:00"
      complexity: 3600
      id: 4
      is_stress_test: false
    - input: "5"
      output: "00:00:05"
      complexity: 5
      id: 5
      is_stress_test: false
    - input: "7263"
      output: "02:01:03"
      complexity: 7263
      id: 6
      is_stress_test: false
  difficulty: Easy
  
- name: Processing incoming packages
  statement: "Write a program which will take two arguments as an input:\n
    \t1. buffer length >= 1\n
    \t2. list of packages passed as a 3-tuple of (package_id, arrival_time, time_to_process)\n
    and will return a list of (package_id, finished_processing_time) according to the following rules\n
    \t1. Program will process packages in the order they came in and calculate finished_processing_time\n
    \t2. Program will keep a buffer and reject any incoming packages when buffer is full\n
    NOTE - for a given package, finished_processing time should be calculated (instead of sleeping) based on previous packages and time_to_process.\n
    in example below the first three packages arrive at the same time (2 second) so the third one is dropped (since the buffer is 2)"
  difficulty: Medium
  test_cases:
    - input: "2 (0 2 3) (1 2 3) (2 2 3) (3 10 6)"
      output: "(0 5) (1 8) (3 16)"
      complexity: 4
      id: 0
      is_stress_test: false
      
    - input: "1 (0 1 5)"
      output: "(0 6)"
      complexity: 1
      id: 1
      is_stress_test: false
      
    - input: "1 (0 1 5) (1 1 1)"
      output: "(0 6)"
      complexity: 1
      id: 1
      is_stress_test: false
     
    - input: "2 (0 1 5) (1 10 10)"
      output: "(0 6) (1 20)"
      complexity: 2
      id: 1
      is_stress_test: false
      
    - input: "2 (0 1 5) (1 10 10) (2 15 3) (3 30 1) (4 40 1)"
      output: "(0 6) (1 20) (2 23) (3 31) (4 41)"
      complexity: 2
      id: 1
      is_stress_test: false
      
- name: Longest common substring
  statement: Find the longest common substring between two strings
  test_cases:
    - input: "ebcdebc abcdabc"
      output: "bcd"
      complexity: 4
      id: 1    
      is_stress_test: false

    - input: "abc abc"
      output: "abc"
      complexity: 3
      id: 0
      is_stress_test: false

    - input: "abcfabc abcfbca"
      output: "abcf"
      complexity: 7
      id: 2    
      is_stress_test: false

    - input: "aaaabcaaaabcaaaaaaaa bcaaaaaaaaaaaa"
      output: "bcaaaaaaaa"
      id: 3
      complexity: 20
      is_stress_test: false

    - input: "askfioasdjfijqoi4jr2i41oi341k23jpo21j3o1jdmkqlwdmnk2nd1ojo3j21op312940h381h49382hre132je921j0e9 askfioasdj|fijqoi4jr2i41o|i341k23jp|o21j3o1jdmkqlwdmn|k2nd1ojo3j21op31|2940h381h49382hre132je921j0e9"
      output: "2940h381h49382hre132je921j0e9"
      id: 4
      complexity: 95
      is_stress_test: false

  difficulty: Easy
